<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on sUnit Blog</title>
    <link>https://sunitparekh.github.io/posts/</link>
    <description>Recent content in Posts on sUnit Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2020 sunitparekh.in</copyright>
    <lastBuildDate>Sun, 21 Aug 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://sunitparekh.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Release based 3 branch model for agile software development</title>
      <link>https://sunitparekh.github.io/posts/30-three-branching-model/</link>
      <pubDate>Sun, 21 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://sunitparekh.github.io/posts/30-three-branching-model/</guid>
      <description>On large teams it is very important that everyone understands and follow the same branching model/workflow. One of very popular branching workflow is GitFlow, however with distributed and novice team following GitFlow is difficult. So over a period of time I have been following simple 3 branch model for development which works fine for agile and continuous delivery software development method.
3 Branch workflow model    Challenges with following GitFlow on large distributed teams  Team to be at advance level of using Git version control with good hold on branching, merging techniques.</description>
    </item>
    
    <item>
      <title>Distributed Agile - What should be the Sprint duration?</title>
      <link>https://sunitparekh.github.io/posts/29-sprint-duration/</link>
      <pubDate>Wed, 17 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://sunitparekh.github.io/posts/29-sprint-duration/</guid>
      <description>What should be the Sprint duration? this question comes up quite commonly on agile projects and opinions vary from as short as a week to as long as 6 weeks. Decision on an appropriate Sprint length depend on many factors. Few of the factors that I consider while deciding on the Sprint length are as follows, however, each factor adds different dimensions when the team is distributed across time zones.</description>
    </item>
    
    <item>
      <title>Ownership model for distributed team</title>
      <link>https://sunitparekh.github.io/posts/28-ownership-model/</link>
      <pubDate>Wed, 13 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://sunitparekh.github.io/posts/28-ownership-model/</guid>
      <description>Setting up distributed team is very common in new world of software development. However, it is equally important that each team operates in complete autonomy and there is a need for teams to be independent, taking ownership and deliver. However, everyone has different views and understanding of ownership. I would like to take this opportunity to explain my view on different aspects of ownership which can help stakeholders and team in having common understanding of expectations and help deliver with ownership and accountability.</description>
    </item>
    
    <item>
      <title>Testing emails with Fake SMTP service</title>
      <link>https://sunitparekh.github.io/posts/27-testing-emails/</link>
      <pubDate>Sat, 17 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://sunitparekh.github.io/posts/27-testing-emails/</guid>
      <description>Testing is key activity of every software development projects. However testing certain features is not easy and need special support functions. One of such functionality is email testing. In this article I introduce few tools that I used in my projects for achieving email testing easily without any side effects.
To test emails effectively we end up using real email addresses, which leads to cluttering mailbox with unwanted emails. For testing different scenarios we need multiple email address, and testing becomes more difficult when it requires checking mailbox of other users.</description>
    </item>
    
    <item>
      <title>Collaboration Techniques for Large Distributed Agile Projects</title>
      <link>https://sunitparekh.github.io/posts/26-collaboration-techniques/</link>
      <pubDate>Fri, 20 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>https://sunitparekh.github.io/posts/26-collaboration-techniques/</guid>
      <description>Article is published on ThoughtWorks Insights here.. https://www.thoughtworks.com/insights/blog/collaboration-techniques-large-distributed-agile-projects</description>
    </item>
    
    <item>
      <title>Story Mapping, Visual Way of Building Product Backlog</title>
      <link>https://sunitparekh.github.io/posts/25-story-mapping/</link>
      <pubDate>Tue, 13 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://sunitparekh.github.io/posts/25-story-mapping/</guid>
      <description>Article is published on ThoughtWorks Insights here.. http://www.thoughtworks.com/insights/blog/story-mapping-visual-way-building-product-backlog</description>
    </item>
    
    <item>
      <title>How to begin with Agile and Continuous Delivery on Legacy Projects?</title>
      <link>https://sunitparekh.github.io/posts/24-legacy-projects/</link>
      <pubDate>Fri, 31 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sunitparekh.github.io/posts/24-legacy-projects/</guid>
      <description>In my interactions with people, I hear &amp;ldquo;Agile and Continuous Delivery works for new green field projects, but we have legacy project. We don&amp;rsquo;t know where to start or we can&amp;rsquo;t do agile and continuous delivery on our project&amp;rdquo;.
Most of the time legacy projects are facing typical issues like fragile codebase, too much technical debt, old libraries &amp;amp; frameworks. Which resulting into long development and testing cycles. To solve these problems, team decides to follow Agile practices.</description>
    </item>
    
    <item>
      <title>Building a Two-Stack CMS for a global product catalog</title>
      <link>https://sunitparekh.github.io/posts/23-two-stack-cms/</link>
      <pubDate>Mon, 06 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sunitparekh.github.io/posts/23-two-stack-cms/</guid>
      <description>Article is published on MartinFowler.com as InfoDeck here.. http://martinfowler.com/articles/two-stack-cms/</description>
    </item>
    
    <item>
      <title>Use structured logging for log search and analytics</title>
      <link>https://sunitparekh.github.io/posts/22-structured-logging/</link>
      <pubDate>Sat, 06 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sunitparekh.github.io/posts/22-structured-logging/</guid>
      <description>Logging is followed in almost every project. However, most of the time we end up using logs only for debugging and auditing purpose. Since past few projects we have been exploring more opportunities for leveraging logs for purposes like application metrics collection, reporting, monitoring and alerting. And during this, I learnt about structured logging and how it enables us to achieve lot more using logs.
Lets first look at what we need to follow while logging to achieve structured logging.</description>
    </item>
    
    <item>
      <title>Guidelines for Structuring Automated Tests</title>
      <link>https://sunitparekh.github.io/posts/21-automated-tests/</link>
      <pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sunitparekh.github.io/posts/21-automated-tests/</guid>
      <description>Article is published on ThoughtWorks Insights here.. http://www.thoughtworks.com/insights/blog/guidelines-structuring-automated-tests</description>
    </item>
    
    <item>
      <title>Using TDD to Influence Design</title>
      <link>https://sunitparekh.github.io/posts/20-tdd-influence-design/</link>
      <pubDate>Fri, 06 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sunitparekh.github.io/posts/20-tdd-influence-design/</guid>
      <description>Article is published on ThoughtWorks Insights here.. http://www.thoughtworks.com/insights/blog/using-tdd-influence-design</description>
    </item>
    
    <item>
      <title>Zero downtime using blue-green deployment strategy</title>
      <link>https://sunitparekh.github.io/posts/19-blue-green-deployment/</link>
      <pubDate>Wed, 23 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sunitparekh.github.io/posts/19-blue-green-deployment/</guid>
      <description>Zero downtime during application deployment is one of the key requirements for continuos delivery. And no business would like their site to be down and showing maintenance page every few days/weeks during deployment.
To achieve this we decide to go for blue-green deployment. However, we were challenged with how to do this in legacy style data center infrastructure where we are,
 Not able to spin new machines and throw away old machines automatically using scripts Don&amp;rsquo;t have ability to add/remove instances using scripts from load-balancer Network level configurations are done manually like firewall setting  Also keeping full in-active stack didn&amp;rsquo;t sound good idea.</description>
    </item>
    
  </channel>
</rss>